#
# Settings for the MSVC 6.0 compiler suite
#

# The environment must be setup in one of 2 ways:
#  1) command-line tools (such as CL.EXE) must be in the path,
#     *AND* the INCLUDE env var must point to the location of the
#     header files, eg:
#        C:/Program\ Files/Microsoft\ Visual\ Studio/VC98/Include
# or
#  2) the MSVC_PATH env var must point to the root of the VC98 tree,
#     eg: C:/Program\ Files/Microsoft\ Visual\ Studio/VC98
#     (note: NO trailing slash!)

ifdef MSVC_PATH
MSVC_BIN_PATH = $(MSVC_PATH)/bin/
MSVC_INC_PATH = $(MSVC_PATH)/Include
else
MSVC_BIN_PATH =
ifndef INCLUDE
dummy := $(error Must define MSVC_PATH or INCLUDE env vars)
endif
MSVC_INC_PATH := $(shell cygpath -m "$(INCLUDE)")
endif

#
# Assembler
#
## No assembler in the MSVC suite
AS		= AssemblerNotSupported

#
# Compiler
#
CC		= $(MSVC_BIN_PATH)cl /nologo
CPP		= $(CC) /E
CXX		= $(CC)

OBJ_SUFFIX=obj

# DASH_D is the command-line option to define a macro
# With most normal compilers, this is '-D'
DASH_D          = /D

# Command-line option to request that debugging information be
# generated
GEN_DEBUG_INFO  = /Zi

CC_WARN_LEVEL	= /W3

ifneq ($(OPENML_DEBUG),0)
CC_OPTIMIZER    = /Od
else
CC_OPTIMIZER	= /O2
endif

## FIXME: doesn't look like dependency-generation option /FD does
## anything.  Need to find another method.
CC_DEPOPTS	=

GCDEFS	=
GCXXDEFS  =

# INC_DASH_I is the command-line option to specify include paths
# On normal platforms, this is "-I"
INC_DASH_I = /I

CC_INCDIR = $(LROOT)/usr/include

GCINCS	  = $(CC_INCDIR)
GCXXINCS  = $(CC_INCDIR)

# For platform-independence, include paths specified in other parts of
# the makefile system (eg: in the GNUmakefile) are not prefixed by -I,
# so add the -I now.

# Also sanitize the paths: MSVC does not operate under the cygwin
# environment, so it does not understand cygwin mount points. We must
# convert to native paths, using the cygpath utility (included with
# cygwin). The "-m" option converts to a "mixed mode": NT-style, but
# with forward slashes instead of backslashes (backslashes cause
# problems with the make shell)
CINCS_NO_DASH_I	= $(foreach path, $(GCINCS) $(ICINCS) $(LCINCS) $(VCINCS), \
	$(shell cygpath -m $(path)))
CINCS = $(foreach path, $(CINCS_NO_DASH_I), /I$(path))

CXXINCS	= $(foreach path, $(GCXXINCS) $(VCXXINCS) $(LCXXINCS) $(ICXXINCS), \
	/I$(shell cygpath -m $(path)))

#
# Linker
#
LD		= $(MSVC_BIN_PATH)link

ifneq ($(OPENML_DEBUG),0)
GLDOPTS	= /DEBUG /PDB:NONE
else
GLDOPTS =
endif

GLDLIBS	=

# Must sanitize object paths for MSVC...
LDOBJS	= $(foreach obj, $(VLDOBJS) $(LLDOBJS) $(ILDOBJS) $(GLDOBJS), \
	$(shell cygpath -m $(obj)))

# Also sanitize the lib paths. Then add "-L" to each path, and sort the
# result -- the point of sorting is to eliminate duplicate paths.
LDLIBPATHS = $(sort $(foreach path, \
		$(VLDLIBPATHS) $(LLDLIBPATHS) $(ILDLIBPATHS) $(GLDLIBPATHS), \
		/LIBPATH:$(shell cygpath -m $(path))))

# Libs are specified in a compiler-independent way, which is just the
# base name of the lib (without "lib" prefix, without ".lib" suffix) OR
# the full name of the object (including suffix which is assumed to be lib).
# With MSVC, libs are simply specified as any other object on the link line,
# eg: ML10.lib libsndfile.lib
# So: if we have a full name, simply use it, otherwise, add "lib" prefix
# and ".lib" suffix.
LDLIBS = $(filter %.lib, $(VLDLIBS) $(LLDLIBS) $(ILDLIBS) $(GLDLIBS)) \
	 $(foreach lib, $(filter-out %.lib, \
		$(VLDLIBS) $(LLDLIBS) $(ILDLIBS) $(GLDLIBS)), \
		lib$(lib).lib)


# Exporting --
# Makefile must define NT_DEF_FILE as the ".def" file specifying the
# symbols to be exported.

DSO_COPTS =
DSO_LDOPTS = /DLL /DEF:$(NT_DEF_FILE)

# LD_DASH_O is the command-line option to name the output of the link
# On normal platforms, this is "-o " (with a trailing space). But to 
# allow for MSVC, we need the usage to be:
#  $(LD_DASH_O)$(OUTPUT_NAME)
# ie: the space must be built-in to the LD_DASH_O variable.
EOF =
LD_DASH_O := /OUT:$(EOF)

#
# Force all linking to be done using the actual linker executable
# (with some compilers, it is preferrable to do linking with the compiler
# executable, so that certain language features are handled properly. Not
# so with MSVC, and using the linker exe simplifies the command-line)
#
# This variable is used in commonrules
_LINKER = $(LD) /nologo

#
# Make sure MSVC-specific stuff is cleaned-up properly
#
XDIRT += vc60.idb vc60.pdb

